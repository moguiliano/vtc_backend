{% extends 'base.html.twig' %}

{% block body %}
	<div class="container mt-5">
		<div class="card shadow-lg p-4">
			<h2 class="text-center mb-4">R√©server un trajet</h2>

			{# Affichage des messages de succ√®s #}
			{% for message in app.flashes('success') %}
				<div class="alert alert-success">{{ message }}</div>
			{% endfor %}

			{# Formulaire de r√©servation #}
			<form id="reservation-form" method="post">
				<div class="row">
					<div class="col-md-6">
						{{ form_row(form.depart) }}
						{{ form_row(form.arrivee) }}
						{{ form_row(form.dateHeureDepart) }}
						{{ form_row(form.NumeroVol) }}
					</div>
					<div
						class="col-md-6">
						{# Option pour un arr√™t interm√©diaire #}
						<div class="form-check mb-3">
							{{ form_widget(form.Stop, {'attr': {'class': 'form-check-input', 'id': 'stop-checkbox'}}) }}
							<label class="form-check-label" for="stop-checkbox">Arr√™t interm√©diaire</label>
						</div>
						<div id="stopover-location" style="display: none;">
							{{ form_row(form.lieuArret) }}
						</div>
						{{ form_row(form.passagers) }}
						{{ form_row(form.bagages) }}
						{# Option pour si√®ge b√©b√© #}
						<div class="form-check mb-3">
							{{ form_widget(form.siegeBebe, {'attr': {'class': 'form-check-input', 'id': 'babyseat-checkbox'}}) }}
							<label class="form-check-label" for="babyseat-checkbox">Besoin d‚Äôun si√®ge b√©b√©</label>
						</div>
					</div>
				</div>

				<div class="row">
					<div class="col-md-6">
						{{ form_row(form.nom) }}
						{{ form_row(form.telephone) }}
					</div>
					<div class="col-md-6">
						{{ form_row(form.Email) }}
						{{ form_row(form.commentaire) }}
					</div>
				</div>

				<div class="text-center mt-4">
					<button type="submit" class="btn btn-primary btn-lg">R√©server</button>
				</div>
			</form>
		</div>
	</div>

	{# Autocompl√©tion de l'adresse #}
	<form id="booking-form">
    <div>
        <label for="departure">Lieu de d√©part :</label>
        <input type="text" id="departure" name="departure" autocomplete="off" placeholder="Entrez une adresse..." onkeyup="fetchSuggestions('departure')">
        <button type="button" class="geoButton" data-target="departure">üìç Utiliser ma position</button>
        <ul class="suggestions-list" id="departure-suggestions"></ul>
    </div>

    <div>
        <label for="arrival">Lieu d'arriv√©e :</label>
        <input type="text" id="arrival" name="arrival" autocomplete="off" placeholder="Entrez une adresse..." onkeyup="fetchSuggestions('arrival')">
        <button type="button" class="geoButton" data-target="arrival">üìç Utiliser ma position</button>
        <ul class="suggestions-list" id="arrival-suggestions"></ul>
    </div>

    <div id="stop-section" style="display: none;">
        <label for="stop">Arr√™t interm√©diaire :</label>
        <input type="text" id="stop" name="stop" autocomplete="off" placeholder="Entrez une adresse..." onkeyup="fetchSuggestions('stop')">
        <button type="button" class="geoButton" data-target="stop">üìç Utiliser ma position</button>
        <ul class="suggestions-list" id="stop-suggestions"></ul>
    </div>

    <div>
        <input type="checkbox" id="add-stop" onchange="toggleStopField()"> Ajouter un arr√™t interm√©diaire
    </div>
</form>


	<p id="distance"></p>
	<p id="duration"></p>

	<script>

	const apiKey = "5vQSLKBwontpC6yqQeoA9Hp5_ytsyeN1SldFAQW1Ks8"; // Remplace par ta vraie cl√© API


// ‚úÖ Fonction principale pour r√©cup√©rer les suggestions d'adresse
async function fetchSuggestions(inputId) {
    const inputField = document.getElementById(inputId);
    const suggestionsList = document.getElementById(`${inputId}-suggestions`);
    const query = inputField.value.trim();

    if (query.length < 3) {
        suggestionsList.innerHTML = ""; // Vide la liste si l'entr√©e est trop courte
        return;
    }

    // ‚úÖ API HERE pour l'autocompl√©tion d'adresse (sans localisation obligatoire)
    let url = `https://geocode.search.hereapi.com/v1/geocode?q=${encodeURIComponent(query)}&apikey=${apiKey}`;

    try {
        const response = await fetch(url);
        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
        const data = await response.json();
        displaySuggestions(data.items, inputId);
    } catch (error) {
        console.error("Erreur lors de la requ√™te :", error);
    }
}

// ‚úÖ Fonction pour afficher les suggestions
function displaySuggestions(suggestions, inputId) {
    const suggestionsList = document.getElementById(`${inputId}-suggestions`);
    suggestionsList.innerHTML = ""; // Vide la liste pr√©c√©dente

    if (suggestions.length === 0) {
        suggestionsList.innerHTML = "<li>Aucune suggestion trouv√©e</li>"; // Message si pas de r√©sultat
        return;
    }

    suggestions.forEach((item) => {
        const li = document.createElement("li");
        li.innerHTML = item.title; // Nom du lieu sugg√©r√©
        li.addEventListener("click", () => {
            document.getElementById(inputId).value = item.title; // Remplit le champ
            suggestionsList.innerHTML = ""; // Vide la liste apr√®s s√©lection
        });
        suggestionsList.appendChild(li);
    });
}

// ‚úÖ Fonction pour activer la g√©olocalisation sur un champ sp√©cifique
document.querySelectorAll(".geoButton").forEach(button => {
    button.addEventListener("click", () => {
        const inputId = button.getAttribute("data-target"); // R√©cup√®re le champ cible
        useGeolocation(inputId);
    });
});

async function useGeolocation(inputId) {
    if (!navigator.geolocation) {
        alert("La g√©olocalisation n'est pas prise en charge par votre navigateur.");
        return;
    }

    navigator.geolocation.getCurrentPosition(async (position) => {
        const lat = position.coords.latitude;
        const lng = position.coords.longitude;

        // ‚úÖ API HERE Reverse Geocoding
        let url = `https://revgeocode.search.hereapi.com/v1/revgeocode?at=${lat},${lng}&apikey=${apiKey}`;

        try {
            const response = await fetch(url);
            if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);

            const data = await response.json();
            if (data.items.length > 0) {
                document.getElementById(inputId).value = data.items[0].address.label; // Remplit le champ
            } else {
                alert("Impossible de trouver votre adresse.");
            }
        } catch (error) {
            console.error("Erreur lors de la r√©cup√©ration de l'adresse :", error);
        }
    }, (error) => {
        alert("Impossible d'obtenir votre position. V√©rifiez vos autorisations.");
        console.error("Erreur de g√©olocalisation :", error);
    });
}

// ‚úÖ Fonction pour afficher/cacher le champ d'arr√™t interm√©diaire
function toggleStopField() {
    const stopSection = document.getElementById("stop-section");
    stopSection.style.display = document.getElementById("add-stop").checked ? "block" : "none";
}

// ‚úÖ Cacher la liste lorsqu'on clique en dehors
document.addEventListener("click", (event) => {
    document.querySelectorAll(".suggestions-list").forEach(list => {
        if (!list.previousElementSibling.contains(event.target) && !list.contains(event.target)) {
            list.innerHTML = "";
        }
    });
});

	</script>






	<script>
		    document.getElementById('reservation-form').addEventListener('submit', function (event) {
                 event.preventDefault(); // Emp√™cher la soumission classique
            let origin = document.getElementById('reservation_depart').value;
            let destination = document.getElementById('reservation_arrivee').value;

            if (! origin || ! destination) {
            alert("Veuillez saisir une adresse de d√©part et d'arriv√©e !");
            return;
            }

            fetch('/distance', {
            method: 'POST',
            headers: {
            'Content-Type': 'application/json'
            },
            body: JSON.stringify(
            {origin: origin, destination: destination}
            )
            }).then(response => response.json()).then(data => {
            if (data.error) {
            alert(data.error);
            } else {
            document.getElementById('distance').innerText = `Distance : ${
            data.distance_km
            } km`;
            document.getElementById('duration').innerText = `Dur√©e estim√©e : ${
            data.duration_min
            } min`;
            }
            }).catch(error => console.error('Erreur:', error));
            });
	</script>
{% endblock %}
